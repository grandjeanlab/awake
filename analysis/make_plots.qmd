---
title: "making plots for the report"
author: "Joanes Grandjean"
date: "10/8/2025"
format: gfm
jupyter: python3
execute: 
  warning: false
---


first define the plotting engine in interactive move
```{python}
#| eval: false
%autoindent 
import matplotlib
matplotlib.use('TkAgg') 

```

then import libraries and set functions that we will use later
```{python}
#import path/file modules
from os import  makedirs
from os.path import join 
#import data processing modules
import polars as pl
#import imaing modules
from nilearn.image import mean_img
from nilearn.plotting import plot_stat_map
#import plotting modules
import matplotlib.pyplot as plt
import seaborn as sns

#function to plot the seed maps. call get_seed_path and do_second_level
def plot_seed_map(data_dir, analysis_dir, seed_img_dir, analysis, df, bg_img, mask_img,seed,cut_coords):
  output_nii = join(analysis_dir, 'group_SBA_nii')
  output_svg = join('../assets/plot', 'group_SBA_svg')
  makedirs(output_nii, exist_ok=True)
  makedirs(output_svg, exist_ok=True)
  p = join(data_dir, analysis, seed_img_dir)
  try:
    for i in df["rodent.ds"].unique():
      print("now doing ds "+str(i))
      print("getting list of seed maps")
      second_level_input = df.filter(df["rodent.ds"]==i)["scan_dir"].map_elements(lambda x: get_seed_path(p, x, seed))
      second_level_input = second_level_input.filter(second_level_input.is_not_null())
      filename_export = "ds-"+str(i)+"_analysis_"+analysis+"_seed-"+seed
      filename_path_nii = join(output_nii, filename_export)
      filename_path_svg = join(output_svg, filename_export)
      title = 'dataset: '+i+', analysis: '+analysis+', seed: ' + seed + ', n = '+ str(len(second_level_input))
      do_mean_img(second_level_input, bg_img, mask_img, title, cut_coords, filename_path_nii, filename_path_svg)
  except:
    pass

def do_mean_img(second_level_input, bg_img, mask_img, title, cut_coords, filename_path_nii, filename_path_svg):
  try:
      print("doing mean image")
      mean_map = mean_img(second_level_input)
      print("writing mean map to "+filename_path_nii)
      mean_map.to_filename(filename_path_nii+'.nii.gz')
      print("writing plot map to "+filename_path_svg)
      plot_stat_map(mean_map, bg_img,title=title, threshold=0.1, vmax=1, symmetric_cbar=True, cmap='coolwarm',  black_bg=False, cut_coords=cut_coords,output_file=filename_path_svg+'.svg')
  except:
    pass

```

now defile some general purpose variables
```{python}
analysis_list = [ "gsr1", "gsr2", "gsr3","wmcsf1", "wmcsf2", "wmcsf3", "aCompCor1", "aCompCor2", "aCompCor3" ]  

cat_index = ["Specific", "Non-specific", "Spurious", "No"]

seed_ref = "s1_r"
seed_specific = "s1_l"
seed_unspecific = "aca_r"
seed_thalamus = "vpm_r"

roi_list=["s1","thal"]
```

load the tables and make some plot. 
```{python}
for rodent in ["mouse", "rat" ]:
#rodent='rat'
  print("#### NOW DOING " + rodent + " ####")
  bg_img = "../assets/template/"+rodent+"/template.nii.gz"
  mask_img = "../assets/template/"+rodent+"/mask.nii.gz"
  df = pl.read_csv("../assets/tables/"+rodent+"_metadata.tsv", separator="\t")
  df_summary=pl.read_csv("../assets/tables/"+rodent+"_summary.tsv", separator="\t")
  print("#### plot fc categories per denoising method ####")
  df_melted = df.melt(id_vars="rodent.ds", value_vars=['s1.cat.' + x for x in analysis_list])
  g = sns.displot(df_melted, x='variable', hue='value', multiple='stack', hue_order=cat_index)
  g.ax.invert_yaxis()
  g.ax.tick_params(axis='x', rotation=90)
  plt.savefig("../assets/plot/"+rodent+"_specificity.svg")
#make the standard s1-s1 / s1-aca connectivity plot.   
  for analysis in analysis_list:
    ax = sns.jointplot(x=df['thal.specific.'+analysis], y=df['s1.unspecific.'+analysis])
    ax.fig.suptitle(rodent+': Thal FC specificity with ' + analysis)
    ax.fig.subplots_adjust(top=0.9)
    ax.ax_joint.set(xlabel='Specific ROI [r]', ylabel='Unspecific ROI [r]')
    ax.ax_joint.vlines(0.1,ymin=df['s1.unspecific.'+analysis].min(),ymax=df['s1.unspecific.'+analysis].max(),linestyles='dashed', color='black')
    ax.ax_joint.vlines(-0.1, -0.1,0.1,linestyles='dashed', color='black')
    ax.ax_joint.hlines(-0.1, -0.1,0.1,linestyles='dashed', color='black')
    ax.ax_joint.hlines(0.1, -0.1,xmax=df['thal.specific.'+analysis].max(),linestyles='dashed', color='black')
    ax.ax_marg_x.axvline(x=0.1, color='black')
    ax.ax_marg_y.axhline(y=0.1, color='black')
    plt.savefig("../assets/plot/specific/"+rodent+"_thal_specificity_"+analysis+".svg")
  for analysis in analysis_list:
    ax = sns.jointplot(x=df['s1.specific.'+analysis], y=df['s1.unspecific.'+analysis])
    ax.fig.suptitle(rodent + ': S1 FC specificity with ' + analysis)
    ax.fig.subplots_adjust(top=0.9)
    ax.ax_joint.set(xlabel='Specific ROI [r]', ylabel='Unspecific ROI [r]')
    ax.ax_joint.vlines(0.1,ymin=df['s1.unspecific.'+analysis].min(),ymax=df['s1.unspecific.'+analysis].max(),linestyles='dashed', color='black')
    ax.ax_joint.vlines(-0.1, -0.1,0.1,linestyles='dashed', color='black')
    ax.ax_joint.hlines(-0.1, -0.1,0.1,linestyles='dashed', color='black')
    ax.ax_joint.hlines(0.1, -0.1,xmax=df['s1.specific.'+analysis].max(),linestyles='dashed', color='black')
    ax.ax_marg_x.axvline(x=0.1, color='black')
    ax.ax_marg_y.axhline(y=0.1, color='black')
    plt.savefig("../assets/plot/specific/"+rodent+"_s1_specificity_"+analysis+".svg")
  print("#### plot SBA maps ####")
#now use nilearn to make group average maps and plot them. 
  if rodent == "mouse": 
    seed_to_plot = pl.DataFrame({'seed': [seed_ref, seed_unspecific, seed_thalamus], 'cut_coords': [(3,1,2.5), (0.2,3.2,2.4), (1.6, 0.4, 0.6)]}, strict=False)
  if rodent == "rat": 
      seed_to_plot = pl.DataFrame({'seed': [seed_ref, seed_unspecific, seed_thalamus], 'cut_coords': [(4.6,-1.6,4.7), (0.3,1,4.5), (2.5, -2.5, 2)]}, strict=False)
  analysis_list = [ "gsr1",  "gsr3", "aCompCor1", "aCompCor3" ]  
  for analysis in analysis_list:
    for row in seed_to_plot.iter_rows(named=True):
        plot_seed_map(data_dir, analysis_dir, seed_img_dir, analysis, df, bg_img, mask_img,row["seed"],row["cut_coords"])
```

