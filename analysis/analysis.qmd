---
title: "global analysis"
author: "Joanes Grandjean"
date: "23/8/2025"
format: gfm
jupyter: python3
execute: 
  warning: false
---

```{python}
#| eval: false
%autoindent 
```

```{python}
import polars as pl
#import plotting modules
import matplotlib.pyplot as plt
import seaborn as sns

analysis_list = [ "gsr1", "gsr2", "gsr3","wmcsf1", "wmcsf2", "wmcsf3", "aCompCor1", "aCompCor2", "aCompCor3" ]  

cat_index = ["Specific", "Non-specific", "Spurious", "No"]

seed_ref = "s1_r"
seed_specific = "s1_l"
seed_unspecific = "aca_r"
seed_thalamus = "vpm_r"

roi_list=["s1","thal"]

```

## Mouse analysis. 


```{python}
rodent='mouse'
print("#### NOW DOING " + rodent + " ####")
df = pl.read_csv("../assets/tables/"+rodent+"_metadata.tsv", separator="\t")
df_summary=pl.read_csv("../assets/tables/"+rodent+"_summary.tsv", separator="\t")
```

```{python}

print("summary of the data that we collected")
print("we processed " + + " datasets") 
print("totalling "+ +" runs")
print("from "+ +" mice")
print("the smallest dataset had "++" runs") 
print("the largest dataset had "++" runs")
print("we could processed "++ " runs.")

print("below is a summary of the data included per dataset")
#to add the summary of the data included

print("information about sex ratio")
print("the datasets contained "++ " males and " ++ " females")

print("information about animal handling")
print( + "datasets used headplates")
print( + "datasets used body restraining")
print( + "datasets used anesthesia before acquisition")
print( + "datasets were collected by males, " + + " by women")


```

```{python}
#first, let's extract some infomation about motion and summarize it per dataset
print("#### MOTION ANALYISIS ####")
print("mean fd across all "+rodent+" datasets")
print(df.select("fd.mean").mean())
df_summary = df_summary.join(
    df.group_by("rodent.ds").agg(pl.mean("fd.mean")),
    on="rodent.ds"
)
print("mean fd per dataset")
print(df_summary.select("rodent.ds", "fd.mean"))
#now we run the analysis per denoising style, we extract the number of dropped frames, the s1-s1, s1-aca, and s1-thal correlations. finally we estimate connectivity specificity
print("Number of dropped frames for each dataset and denoising method")
print("This corresponds to the following rabies flags for mice")
print("#gsr1: --frame_censoring FD_censoring=true,FD_threshold=0.1,DVARS_censoring=true")
print("#gsr2: --frame_censoring FD_censoring=true,FD_threshold=0.5,DVARS_censoring=true")
print("#gsr3: --frame_censoring FD_censoring=true,FD_threshold=0.5,DVARS_censoring=false")
print("#### DENOISE ANALYSIS ####")
print("dropped frames per dataset")
print(df_summary.select("rodent.ds", "total.frames", "dropped.frames.gsr1", "dropped.frames.gsr2", "dropped.frames.gsr3"))
print("#### FC specifiticy analysis ####")
for analysis in analysis_list:
  print("overall FC specificity for "+ analysis)
  print(df["s1.cat."+analysis].value_counts().with_columns(pl.col("count")/pl.sum("count")).sort(by='count', descending=True))
print("s1-s1 specificity analysis per dataset (only showing specific values)")
print(df_summary[["rodent.ds"]+["s1."+analysis+".Specific" for analysis in analysis_list]])
#same values but with a more concise plotting style. Overall, denoising style did not impact the overall number of specific scans. once the analysis is complete with all scans, i will pick the better performing method to carry out a singular analysis 
print("#### make plots ####")
df_melted = df.melt(id_vars="rodent.ds", value_vars=['s1.cat.' + x for x in analysis_list])
g = sns.displot(df_melted, x='variable', hue='value', multiple='stack', hue_order=cat_index)
g.ax.invert_yaxis()
g.ax.tick_params(axis='x', rotation=90)
plt.savefig("../assets/plot/"+rodent+"_specificity.svg")
#make the standard s1-s1 / s1-aca connectivity plot.   
for analysis in analysis_list:
  ax = sns.jointplot(x=df['thal.specific.'+analysis], y=df['s1.unspecific.'+analysis])
  ax.fig.suptitle(rodent+': Thal FC specificity with ' + analysis)
  ax.fig.subplots_adjust(top=0.9)
  ax.ax_joint.set(xlabel='Specific ROI [r]', ylabel='Unspecific ROI [r]')
  ax.ax_joint.vlines(0.1,ymin=df['s1.unspecific.'+analysis].min(),ymax=df['s1.unspecific.'+analysis].max(),linestyles='dashed', color='black')
  ax.ax_joint.vlines(-0.1, -0.1,0.1,linestyles='dashed', color='black')
  ax.ax_joint.hlines(-0.1, -0.1,0.1,linestyles='dashed', color='black')
  ax.ax_joint.hlines(0.1, -0.1,xmax=df['thal.specific.'+analysis].max(),linestyles='dashed', color='black')
  ax.ax_marg_x.axvline(x=0.1, color='black')
  ax.ax_marg_y.axhline(y=0.1, color='black')
  plt.savefig("../assets/plot/specific/"+rodent+"_thal_specificity_"+analysis+".svg")
for analysis in analysis_list:
  ax = sns.jointplot(x=df['s1.specific.'+analysis], y=df['s1.unspecific.'+analysis])
  ax.fig.suptitle(rodent + ': S1 FC specificity with ' + analysis)
  ax.fig.subplots_adjust(top=0.9)
  ax.ax_joint.set(xlabel='Specific ROI [r]', ylabel='Unspecific ROI [r]')
  ax.ax_joint.vlines(0.1,ymin=df['s1.unspecific.'+analysis].min(),ymax=df['s1.unspecific.'+analysis].max(),linestyles='dashed', color='black')
  ax.ax_joint.vlines(-0.1, -0.1,0.1,linestyles='dashed', color='black')
  ax.ax_joint.hlines(-0.1, -0.1,0.1,linestyles='dashed', color='black')
  ax.ax_joint.hlines(0.1, -0.1,xmax=df['s1.specific.'+analysis].max(),linestyles='dashed', color='black')
  ax.ax_marg_x.axvline(x=0.1, color='black')
  ax.ax_marg_y.axhline(y=0.1, color='black')
  plt.savefig("../assets/plot/specific/"+rodent+"_s1_specificity_"+analysis+".svg")
print("#### plot SBA maps ####")
#now use nilearn to make group average maps and plot them. 
if rodent == "mouse": 
  seed_to_plot = pl.DataFrame({'seed': [seed_ref, seed_unspecific, seed_thalamus], 'cut_coords': [(3,1,2.5), (0.2,3.2,2.4), (1.6, 0.4, 0.6)]}, strict=False)
if rodent == "rat": 
    seed_to_plot = pl.DataFrame({'seed': [seed_ref, seed_unspecific, seed_thalamus], 'cut_coords': [(4.6,-1.6,4.7), (0.3,1,4.5), (2.5, -2.5, 2)]}, strict=False)
analysis_list = [ "gsr1",  "gsr3", "aCompCor1", "aCompCor3" ]  
for analysis in analysis_list:
  for row in seed_to_plot.iter_rows(named=True):
      plot_seed_map(data_dir, analysis_dir, seed_img_dir, analysis, df, bg_img, mask_img,row["seed"],row["cut_coords"])


```

